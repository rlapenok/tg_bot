use std::{sync::{Arc, Mutex}, time::Duration, fs::File, io::Write};

use log::info;
use teloxide::{
    requests::{Requester, ResponseResult},
    types::Message,
    Bot,
};

use crate::{build_dispatcher::{create_chema::{AuthDialogue, GlobalDialogue}, commands::Commands}, myauthenticator::MyAuthenticator};

use super::dialogues::Auth;

pub async fn other_msg_hanler_auth(bot: Bot, msg: Message) -> ResponseResult<()> {
    let chat_id = msg.chat.id;
    bot.send_message(
        chat_id,
        "–ë—Ä–∞—Ç—É–ª–µ—Ü, —á—Ç–æ-—Ç–æ —Ç—ã –Ω–µ —Ç–æ –≤–≤–µ–ª)) –î–∞–≤–∞–π–∫–∞ –≤ –ß–í–ö –í–∞–≥–Ω–µ—Ä üá∑üá∫\n –í–≤–æ–¥–∏ —Å—á–∞ /startauth",
    )
    .await?;
    Ok(())
}

pub async fn init_handler_auth(
    bot: Bot,
    msg: Message,
    cmd: Commands,
    auth: Arc<Mutex<MyAuthenticator>>,
    auth_dialogue: AuthDialogue,
) -> ResponseResult<()> {
    let chat_id = msg.chat.id;
    match cmd {
        Commands::StartAuth => {
            let lock = auth.clone().lock().unwrap().exist_key();

            match lock {
                true => {
                    let resp="–ë—Ä–∞—Ç—É–ª–µ—Ü, —è –≤–∏–∂—É, —á—Ç–æ —Ç—ã —Ç—É—Ç —É–∂–µ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑\n–î–∞–≤–∞–π —Å—Ö–æ–¥–∏—à—å –≤ Google Authenticator –∏ –≤–æ–∑—å–º–µ—à—å —Ç–∞–º –∫–æ–¥, –∏–∑ –∫–ª—é—á–∞,\n–∫–æ—Ç–æ—Ä—ã–π —è —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏–ª –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ\n–í–≤–æ–¥–∏ —Å–≤–æ–π –∫–æ–¥ –∏–∑ Google Authenticator, –∞ —è –ø—Ä–æ–≤–µ—Ä—é —Ç—ã –ª–∏ —ç—Ç–æ üòà";
                    auth_dialogue.update(Auth::CheckCode).await.unwrap();
                    bot.send_message(chat_id, resp).await?;
                }
                false => {
                    let key = auth.clone().lock().unwrap().create_keys();
                    let bytes=key.as_bytes();
                    File::create("key.txt").unwrap().write_all(bytes).unwrap();
                    info!("Create key.txt nad put key");
                    let info="–ë—Ä–∞—Ç—É–ª–µ—Ü, —è —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ => —è —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏–ª –∫–ª—é—á –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google Authenticator üîë\n –î–∞–≤–∞–π–∫–∞ –≤—Å—Ç–∞–≤–∏–º –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ \n";
                    let resp = format!("{}–¢–≤–æ–π üîë: {}", info, key);
                    bot.send_message(chat_id, resp).await?;
                    auth_dialogue.update(Auth::CheckCode).await.unwrap();
                    tokio::time::sleep(Duration::from_secs(10)).await;
                    let resp_2="–ò—Ç–∞–∫, —Ç—ã —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª üîë Google Authenticator üîë\n–¢–µ–ø–µ—Ä—å –≤–æ–∑—å–º–∏ –æ—Ç—Ç—É–¥–∞ 6-—Ç–∏ –∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏ –≤—Å—Ç–∞–≤—å –≤ –º–µ–Ω—è üòù";
                    bot.send_message(chat_id, resp_2).await?;
                }
            };
        }
        _ => {}
    }
    Ok(())
}

pub async fn check_code_handler_auth(
    bot: Bot,
    msg: Message,
    auth: Arc<Mutex<MyAuthenticator>>,
    dialogue_auth: AuthDialogue,
    dialogue_global:GlobalDialogue
) -> ResponseResult<()> {
    let chat_id = msg.chat.id;

    let code = msg.text().unwrap().trim();
    match code.parse::<usize>() {
        Ok(_) => {
            let auth = auth.clone().lock().unwrap().verify_code(code);
            match auth {
                true => {
                    let resp="–ë—Ä–∞—Ç—É–ª–µ—Ü, –≤—Å–µ üëå => –º–æ–∂–µ—à—å –¥–∞–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å,\n—á—Ç–æ –µ—â–µ –∫—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–≤–æ–∏–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏–∫–∞–º–∏";
                    dialogue_auth.exit().await.unwrap();
                    dialogue_global.update(super::dialogues::Global::GetWallet).await.unwrap();
                    bot.send_message(chat_id, resp).await?;

                }
                false => {
                    let resp="–ë—Ä–∞—Ç—É–ª–µ—Ü, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üêµ => —Ç—ã —Ö–æ—á–µ—à—å –º–µ–Ω—è –≥–¥–µ-—Ç–æ –Ω–∞–µ–±–∞—Ç—å,\n–ü–æ—à–µ–ª –Ω–∞—Ö—É–π, –∫–æ–∑–µ–ª,–µ–±–∞–Ω—ã–π üíê\n–î–∞–≤–∞ –≤–≤–æ–¥–∏ –∫–ª—é—á –∑–∞–Ω–æ–≤–æ";
                    bot.send_message(chat_id, resp).await?;
                }
            }
        }
        Err(_) => {
            bot.send_message(chat_id, "–ë—Ä–∞—Ç—É–ª–µ—Ü, —Ç—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
                .await?;
        }
    }

    Ok(())
}
